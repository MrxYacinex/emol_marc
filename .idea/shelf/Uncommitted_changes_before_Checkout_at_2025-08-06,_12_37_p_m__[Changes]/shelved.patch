Index: app/(app)/home/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"use client\"\n\nimport { useState, useRef, useEffect, useCallback } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Play,\n  Pause,\n  Square,\n  Camera,\n  Mic,\n  MicOff,\n  Settings as SettingsIcon,\n  Brain,\n  Clock,\n  Target,\n  TrendingUp,\n  Coffee,\n  BookOpen,\n  Zap,\n  RotateCcw,\n} from \"lucide-react\"\n\nexport default function StudyCompanion() {\n  const router = useRouter()\n  const [isRecording, setIsRecording] = useState(false)\n  const [isPaused, setIsPaused] = useState(false)\n  const [isMuted, setIsMuted] = useState(false)\n  const [studyTime, setStudyTime] = useState(0)\n  const [sessionProgress, setSessionProgress] = useState(0)\n  const [currentSuggestion, setCurrentSuggestion] = useState(\"\")\n  \n  // AI Analysis Data\n  const [focusScore, setFocusScore] = useState(0)\n  const [attentionStatus, setAttentionStatus] = useState(\"No Data\")\n  const [fatigueStatus, setFatigueStatus] = useState(\"awake\")\n  const [gazeDirection, setGazeDirection] = useState(\"unknown\")\n  const [headPose, setHeadPose] = useState({ pitch: 0, yaw: 0, roll: 0 })\n  const [handAnalysis, setHandAnalysis] = useState({\n    hand_fatigue_detected: false,\n    hand_at_head: false,\n    playing_with_hair: false,\n    hand_movement: 'normal'\n  })\n  const [earValue, setEarValue] = useState(0)\n  const [isAnalyzing, setIsAnalyzing] = useState(false)\n  const [finalAnalysis, setFinalAnalysis] = useState<{\n    lernfaehigkeitsScore?: number\n    attention?: string\n    status?: string\n    avgEAR?: number\n    gazeLeft?: string\n    gazeRight?: string\n    headPose?: { pitch: number, yaw: number, roll: number }\n    handAnalysis?: {\n      hand_fatigue_detected?: boolean\n      hand_at_head?: boolean\n      playing_with_hair?: boolean\n      hand_movement?: string\n    }\n  } | null>(null)\n\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const streamRef = useRef<MediaStream | null>(null)\n  const timerRef = useRef<NodeJS.Timeout | null>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const analysisIntervalRef = useRef<NodeJS.Timeout | null>(null)\n\n  // Final Analysis Function for frozen frame\n  const performFinalAnalysis = useCallback(async () => {\n    if (!videoRef.current || !canvasRef.current) return\n\n    setIsAnalyzing(true)\n    \n    const video = videoRef.current\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n    \n    if (!ctx) {\n      setIsAnalyzing(false)\n      return\n    }\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth\n    canvas.height = video.videoHeight\n\n    // Draw final video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height)\n\n    // Convert canvas to base64 image\n    const imageDataURL = canvas.toDataURL('image/jpeg', 0.9)\n\n    try {\n      const response = await fetch('http://localhost:5000/api/analyze_frame', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          image: imageDataURL\n        })\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        \n        // Store final analysis\n        setFinalAnalysis(data)\n        \n        // Update current states with final analysis\n        setFocusScore(data.lernfaehigkeitsScore || 0)\n        setAttentionStatus(data.attention || \"No Data\")\n        setFatigueStatus(data.status || \"awake\")\n        setGazeDirection(`${data.gazeLeft || \"unknown\"}/${data.gazeRight || \"unknown\"}`)\n        setHeadPose(data.headPose || { pitch: 0, yaw: 0, roll: 0 })\n        setHandAnalysis(data.handAnalysis || {\n          hand_fatigue_detected: false,\n          hand_at_head: false,\n          playing_with_hair: false,\n          hand_movement: 'normal'\n        })\n        setEarValue(data.avgEAR || 0)\n\n        // Generate final AI suggestion\n        generateFinalSuggestion(data)\n      }\n    } catch (error) {\n      console.error('Final Analysis Error:', error)\n      setCurrentSuggestion(\"Analysis completed. Session ended successfully.\")\n    } finally {\n      setIsAnalyzing(false)\n    }\n  }, [])\n\n  // Generate final suggestions based on analysis\n  const generateFinalSuggestion = (data: {\n    status?: string\n    attention?: string\n    lernfaehigkeitsScore?: number\n    handAnalysis?: {\n      hand_fatigue_detected?: boolean\n      playing_with_hair?: boolean\n    }\n  }) => {\n    const score = data.lernfaehigkeitsScore || 0\n    \n    if (score >= 90) {\n      setCurrentSuggestion(\"\uD83C\uDF89 Excellent session! You maintained outstanding focus throughout.\")\n    } else if (score >= 75) {\n      setCurrentSuggestion(\"âœ… Great session! Your focus was very good overall.\")\n    } else if (score >= 60) {\n      setCurrentSuggestion(\"\uD83D\uDC4D Good session! There's room for improvement in maintaining focus.\")\n    } else if (data.status === \"tired\" || data.handAnalysis?.hand_fatigue_detected) {\n      setCurrentSuggestion(\"\uD83D\uDE34 You seemed tired towards the end. Consider taking longer breaks next time.\")\n    } else {\n      setCurrentSuggestion(\"\uD83D\uDCCA Session completed. Review your performance metrics for insights.\")\n    }\n  }\n\n  // AI Analysis Function\n  const analyzeFrame = useCallback(async () => {\n    if (!videoRef.current || !canvasRef.current) return\n\n    const video = videoRef.current\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n    \n    if (!ctx) return\n\n    // Set canvas size to match video\n    canvas.width = video.videoWidth\n    canvas.height = video.videoHeight\n\n    // Draw video frame to canvas\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height)\n\n    // Convert canvas to base64 image\n    const imageDataURL = canvas.toDataURL('image/jpeg', 0.8)\n\n    try {\n      const response = await fetch('http://localhost:5000/api/analyze_frame', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          image: imageDataURL\n        })\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        \n        // Update AI analysis state\n        setFocusScore(data.lernfaehigkeitsScore || 0)\n        setAttentionStatus(data.attention || \"No Data\")\n        setFatigueStatus(data.status || \"awake\")\n        setGazeDirection(`${data.gazeLeft || \"unknown\"}/${data.gazeRight || \"unknown\"}`)\n        setHeadPose(data.headPose || { pitch: 0, yaw: 0, roll: 0 })\n        setHandAnalysis(data.handAnalysis || {\n          hand_fatigue_detected: false,\n          hand_at_head: false,\n          playing_with_hair: false,\n          hand_movement: 'normal'\n        })\n        setEarValue(data.avgEAR || 0)\n\n        // Generate AI suggestions based on analysis\n        generateAISuggestion(data)\n      }\n    } catch (error) {\n      console.error('AI Analysis Error:', error)\n    }\n  }, [])\n\n  // Generate suggestions based on AI analysis\n  const generateAISuggestion = (data: {\n    status?: string\n    attention?: string\n    lernfaehigkeitsScore?: number\n    handAnalysis?: {\n      hand_fatigue_detected?: boolean\n      playing_with_hair?: boolean\n    }\n  }) => {\n    if (data.status === \"tired\") {\n      setCurrentSuggestion(\"You seem tired. Consider taking a break chat.\")\n    } else if (data.handAnalysis?.hand_fatigue_detected){\n      setCurrentSuggestion(\"Detected hand fatigue. Try to focus on the material or take a break.\")\n    } else if (data.attention === \"abgelenkt\") {\n      setCurrentSuggestion(\"Your attention seems to be wandering. Try to refocus.\")\n    } else if (data.handAnalysis?.playing_with_hair) {\n      setCurrentSuggestion(\"Detected fidgeting. Take a moment to center yourself.\")\n    } else if ((data.lernfaehigkeitsScore || 0) > 80) {\n      setCurrentSuggestion(\"Great focus! You're in an optimal learning state.\")\n    } else if ((data.lernfaehigkeitsScore || 0) < 60) {\n      setCurrentSuggestion(\"Try adjusting your posture and focus on the material.\")\n    } else {\n      setCurrentSuggestion(\"Maintaining good focus. Keep up the good work!\")\n    }\n  }\n\n  useEffect(() => {\n    if (isRecording && !isPaused) {\n      timerRef.current = setInterval(() => {\n        setStudyTime((prev) => prev + 1)\n        setSessionProgress((prev) => Math.min(prev + 0.5, 100))\n      }, 1000)\n\n      // Start AI analysis every 3 seconds\n      analysisIntervalRef.current = setInterval(() => {\n        analyzeFrame()\n      }, 3000)\n    } else {\n      if (timerRef.current) {\n        clearInterval(timerRef.current)\n      }\n      if (analysisIntervalRef.current) {\n        clearInterval(analysisIntervalRef.current)\n      }\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current)\n      }\n      if (analysisIntervalRef.current) {\n        clearInterval(analysisIntervalRef.current)\n      }\n    }\n  }, [isRecording, isPaused, analyzeFrame])\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: !isMuted,\n      })\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream\n        streamRef.current = stream\n      }\n\n      setIsRecording(true)\n    } catch (error) {\n      console.error(\"Error accessing camera:\", error)\n    }\n  }\n\n  const pauseRecording = () => {\n    setIsPaused(!isPaused)\n  }\n\n  const stopRecording = async () => {\n    // Stop all intervals first\n    if (timerRef.current) {\n      clearInterval(timerRef.current)\n    }\n    if (analysisIntervalRef.current) {\n      clearInterval(analysisIntervalRef.current)\n    }\n\n    // Perform final analysis on the frozen frame\n    await performFinalAnalysis()\n\n    // Stop the video stream\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach((track) => track.stop())\n    }\n\n    setIsRecording(false)\n    setIsPaused(false)\n  }\n\n  const resetSession = () => {\n    // Stop all intervals\n    if (timerRef.current) {\n      clearInterval(timerRef.current)\n    }\n    if (analysisIntervalRef.current) {\n      clearInterval(analysisIntervalRef.current)\n    }\n\n    // Stop video stream if running\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach((track) => track.stop())\n    }\n\n    // Reset all state\n    setIsRecording(false)\n    setIsPaused(false)\n    setStudyTime(0)\n    setSessionProgress(0)\n    setCurrentSuggestion(\"\")\n    setFocusScore(0)\n    setAttentionStatus(\"No Data\")\n    setFatigueStatus(\"awake\")\n    setGazeDirection(\"unknown\")\n    setHeadPose({ pitch: 0, yaw: 0, roll: 0 })\n    setHandAnalysis({\n      hand_fatigue_detected: false,\n      hand_at_head: false,\n      playing_with_hair: false,\n      hand_movement: 'normal'\n    })\n    setEarValue(0)\n    setIsAnalyzing(false)\n    setFinalAnalysis(null)\n  }\n\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600)\n    const minutes = Math.floor((seconds % 3600) / 60)\n    const secs = seconds % 60\n\n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`\n    }\n    return `${minutes}:${secs.toString().padStart(2, \"0\")}`\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white dark:bg-[#121212] p-4 md:p-6\">\n      <div className=\"mx-auto max-w-6xl space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white\">Study Companion</h1>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">AI-powered study session analysis</p>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" className=\"text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800\" onClick={() => router.push('/settings')}>\n            <SettingsIcon className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        <div className=\"grid gap-6 lg:grid-cols-3\">\n          {/* Video Feed */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white dark:bg-[#1a1a1a] border-gray-200 dark:border-gray-800 shadow-sm\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg text-gray-900 dark:text-white\">Study Session</CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    {isRecording && (\n                      <Badge variant=\"secondary\" className=\"bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-400 border-green-200 dark:border-green-800\">\n                        <div className=\"mr-1 h-2 w-2 rounded-full bg-green-500 animate-pulse\" />\n                        Recording\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"relative aspect-video overflow-hidden rounded-xl bg-gray-200 dark:bg-gray-800\">\n                  <video ref={videoRef} autoPlay muted className=\"h-full w-full object-cover\" />\n                  {!isRecording && (\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"text-center text-gray-600 dark:text-gray-300\">\n                        <Camera className=\"mx-auto h-12 w-12 mb-4 opacity-70\" />\n                        <p className=\"text-sm opacity-90\">Click start to begin your study session</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Controls */}\n                <div className=\"flex items-center justify-center gap-3\">\n                  {!isRecording ? (\n                    <>\n                      <Button \n                        onClick={startRecording} \n                        className=\"group bg-green-600 hover:bg-green-700 text-white shadow-sm transition-all duration-[400ms] ease-out flex items-center justify-center px-3 py-2\"\n                      >\n                        <Play className=\"h-4 w-4 transition-all duration-[400ms] ease-out group-hover:mr-2\" />\n                        <span className=\"max-w-0 overflow-hidden opacity-0 transition-all duration-[400ms] ease-out group-hover:max-w-[120px] group-hover:opacity-100 whitespace-nowrap\">\n                          Start Session\n                        </span>\n                      </Button>\n                      \n                      {(studyTime > 0 || finalAnalysis) && (\n                        <Button \n                          variant=\"outline\" \n                          onClick={resetSession}\n                          className=\"border-gray-300 dark:border-gray-600 bg-white dark:bg-[#1a1a1a] text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700\"\n                        >\n                          <RotateCcw className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </>\n                  ) : (\n                    <>\n                      <Button variant=\"outline\" onClick={pauseRecording} className=\"border-gray-300 dark:border-gray-600 bg-white dark:bg-[#1a1a1a] text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700\">\n                        {isPaused ? <Play className=\"h-4 w-4\" /> : <Pause className=\"h-4 w-4\" />}\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        onClick={stopRecording}\n                        disabled={isAnalyzing}\n                        className=\"border-red-300 dark:border-red-600 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 bg-white dark:bg-[#1a1a1a]\"\n                      >\n                        {isAnalyzing ? (\n                          <>\n                            <div className=\"animate-spin h-4 w-4 border-2 border-red-500 border-t-transparent rounded-full mr-2\" />\n                            Analyzing...\n                          </>\n                        ) : (\n                          <Square className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n                    </>\n                  )}\n\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setIsMuted(!isMuted)} \n                    className={`border-gray-300 dark:border-gray-600 bg-white dark:bg-[#1a1a1a] hover:bg-gray-50 dark:hover:bg-gray-700 ${\n                      isMuted \n                        ? 'text-red-600 dark:text-red-400 border-red-300 dark:border-red-600 hover:bg-red-50 dark:hover:bg-red-900/20' \n                        : 'text-gray-700 dark:text-gray-300'\n                    }`}\n                  >\n                    {isMuted ? <MicOff className=\"h-4 w-4\" /> : <Mic className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Session Stats */}\n            <Card className=\"bg-white dark:bg-[#1a1a1a] border-gray-200 dark:border-gray-800 shadow-sm\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base text-gray-900 dark:text-white flex items-center gap-2\">\n                  <Clock className=\"h-4 w-4\" />\n                  Session Stats\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-mono font-semibold text-gray-900 dark:text-white\">{formatTime(studyTime)}</div>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">Study Time</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Progress</span>\n                    <span className=\"text-gray-900 dark:text-white\">{Math.round(sessionProgress)}%</span>\n                  </div>\n                  <Progress value={sessionProgress} className=\"h-2\" />\n                </div>\n\n                <Separator className=\"dark:bg-gray-700\" />\n\n                <div className=\"grid grid-cols-2 gap-4 text-center\">\n                  <div>\n                    <div className=\"text-lg font-semibold text-gray-900 dark:text-white\">{focusScore}</div>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Focus Score</p>\n                  </div>\n                  <div>\n                    <div className=\"text-lg font-semibold text-gray-900 dark:text-white\">{attentionStatus}</div>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">Attention</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AI Analysis Details */}\n            <Card className=\"bg-white dark:bg-[#1a1a1a] border-gray-200 dark:border-gray-800 shadow-sm\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base text-gray-900 dark:text-white flex items-center gap-2\">\n                  <Brain className=\"h-4 w-4\" />\n                  AI Analysis {finalAnalysis && !isRecording && (\n                    <span className=\"text-xs bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 px-2 py-1 rounded-full ml-2 border border-blue-200 dark:border-blue-800\">\n                      Final Results\n                    </span>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {isAnalyzing && (\n                  <div className=\"flex items-center justify-center p-4\">\n                    <div className=\"animate-spin h-6 w-6 border-2 border-blue-500 border-t-transparent rounded-full mr-3\" />\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">Analyzing final frame...</span>\n                  </div>\n                )}\n                \n                <div className=\"grid grid-cols-2 gap-3 text-xs\">\n                  <div>\n                    <span className=\"text-gray-600 dark:text-gray-400\">Fatigue:</span>\n                    <div className={`font-semibold ${fatigueStatus === 'tired' ? 'text-red-600 dark:text-red-400' : 'text-green-600 dark:text-green-400'}`}>\n                      {fatigueStatus}\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600 dark:text-gray-400\">Gaze:</span>\n                    <div className=\"font-semibold text-gray-900 dark:text-white\">{gazeDirection}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600 dark:text-gray-400\">EAR:</span>\n                    <div className=\"font-semibold text-gray-900 dark:text-white\">{earValue.toFixed(1)}%</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600 dark:text-gray-400\">Head Pose: </span>\n                    <div className=\"font-semibold text-gray-900 dark:text-white\">\n                      Y:{headPose.yaw.toFixed(0)}Â° P:{headPose.pitch.toFixed(0)}Â°\n                    </div>\n                  </div>\n                </div>\n                \n                {handAnalysis.hand_fatigue_detected && (\n                  <div className=\"rounded-lg bg-yellow-50 dark:bg-yellow-900/20 p-2 text-xs text-yellow-800 dark:text-yellow-300 border border-yellow-200 dark:border-yellow-800\">\n                    âš \uFE0F Hand fatigue detected\n                  </div>\n                )}\n                \n                {handAnalysis.playing_with_hair && (\n                  <div className=\"rounded-lg bg-blue-50 dark:bg-blue-900/20 p-2 text-xs text-blue-800 dark:text-blue-300 border border-blue-200 dark:border-blue-800\">\n                    \uD83D\uDCAB Fidgeting detected\n                  </div>\n                )}\n                \n                {finalAnalysis && !isRecording && (\n                  <div className=\"border-t border-gray-200 dark:border-gray-700 pt-3 mt-3\">\n                    <div className=\"text-xs text-gray-600 dark:text-gray-400 mb-2\">Session Summary:</div>\n                    <div className=\"bg-gray-50 dark:bg-[#0f0f0f] rounded-lg p-3 text-xs border border-gray-200 dark:border-gray-800\">\n                      <div className=\"grid grid-cols-2 gap-2\">\n                        <div>Final Focus Score: <span className=\"font-semibold text-gray-900 dark:text-white\">{finalAnalysis.lernfaehigkeitsScore}</span></div>\n                        <div>Final Attention: <span className=\"font-semibold text-gray-900 dark:text-white\">{finalAnalysis.attention}</span></div>\n                        <div>Final Status: <span className=\"font-semibold text-gray-900 dark:text-white\">{finalAnalysis.status}</span></div>\n                        <div>Final EAR: <span className=\"font-semibold text-gray-900 dark:text-white\">{finalAnalysis.avgEAR?.toFixed(1)}%</span></div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Hidden canvas for AI analysis */}\n            <canvas ref={canvasRef} style={{ display: 'none' }} />\n\n            {/* AI Insights */}\n            <Card className=\"bg-white dark:bg-[#1a1a1a] border-gray-200 dark:border-gray-800 shadow-sm\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base text-gray-900 dark:text-white flex items-center gap-2\">\n                  <Brain className=\"h-4 w-4\" />\n                  AI Insights\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {currentSuggestion ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"rounded-lg bg-blue-50 dark:bg-blue-900/20 p-3 text-sm text-blue-900 dark:text-blue-300 border border-blue-200 dark:border-blue-800\">{currentSuggestion}</div>\n\n                    <div className=\"flex gap-2\">\n                      <Button size=\"sm\" variant=\"ghost\" className=\"h-8 text-xs hover:bg-gray-100 dark:hover:bg-gray-700\">\n                        <Coffee className=\"mr-1 h-3 w-3\" />\n                        Break\n                      </Button>\n                      <Button size=\"sm\" variant=\"ghost\" className=\"h-8 text-xs hover:bg-gray-100 dark:hover:bg-gray-700\">\n                        <BookOpen className=\"mr-1 h-3 w-3\" />\n                        Switch Topic\n                      </Button>\n                      <Button size=\"sm\" variant=\"ghost\" className=\"h-8 text-xs hover:bg-gray-100 dark:hover:bg-gray-700\">\n                        <Zap className=\"mr-1 h-3 w-3\" />\n                        Deep Dive\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">Start a session to receive AI-powered insights</p>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"bg-white dark:bg-[#1a1a1a] border-gray-200 dark:border-gray-800 shadow-sm\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base text-gray-900 dark:text-white flex items-center gap-2\">\n                  <Target className=\"h-4 w-4\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <Button variant=\"ghost\" className=\"w-full justify-start h-9 text-sm hover:bg-gray-100 dark:hover:bg-gray-700\">\n                  <TrendingUp className=\"mr-2 h-4 w-4\" />\n                  View Analytics\n                </Button>\n                <Button variant=\"ghost\" className=\"w-full justify-start h-9 text-sm hover:bg-gray-100 dark:hover:bg-gray-700\">\n                  <BookOpen className=\"mr-2 h-4 w-4\" />\n                  Study Goals\n                </Button>\n                <Button variant=\"ghost\" className=\"w-full justify-start h-9 text-sm hover:bg-gray-100 dark:hover:bg-gray-700\">\n                  <Coffee className=\"mr-2 h-4 w-4\" />\n                  Break Timer\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/(app)/home/page.tsx b/app/(app)/home/page.tsx
--- a/app/(app)/home/page.tsx	(revision 2316e01e9fdc825017f07ed68854d0eca8f6c4f1)
+++ b/app/(app)/home/page.tsx	(date 1754473030590)
@@ -407,6 +407,15 @@
                       </div>
                     </div>
                   )}
+                  {isPaused && (
+                    <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
+                      <div className="text-center text-white">
+                        <Coffee className="mx-auto h-12 w-12 mb-4" />
+                        <p className="text-lg font-semibold">Break Time</p>
+                        <p className="text-sm opacity-90">Session paused</p>
+                      </div>
+                    </div>
+                  )}
                 </div>
 
                 {/* Controls */}
@@ -483,10 +492,24 @@
                 </CardTitle>
               </CardHeader>
               <CardContent className="space-y-4">
+                {/* Study Time */}
                 <div className="text-center">
                   <div className="text-2xl font-mono font-semibold text-gray-900 dark:text-white">{formatTime(studyTime)}</div>
                   <p className="text-xs text-gray-600 dark:text-gray-400">Study Time</p>
                 </div>
+
+                {/* Break Time - Only show when there's break time or currently on break */}
+                {(breakTime > 0 || isPaused) && (
+                  <div className="text-center">
+                    <div className={`text-lg font-mono font-semibold ${isPaused ? 'text-yellow-600 dark:text-yellow-400' : 'text-gray-600 dark:text-gray-400'}`}>
+                      {formatTime(breakTime)}
+                    </div>
+                    <p className="text-xs text-gray-600 dark:text-gray-400 flex items-center justify-center gap-1">
+                      <Timer className="h-3 w-3" />
+                      Break Time
+                    </p>
+                  </div>
+                )}
 
                 <div className="space-y-2">
                   <div className="flex justify-between text-sm">
@@ -508,6 +531,29 @@
                     <p className="text-xs text-gray-600 dark:text-gray-400">Attention</p>
                   </div>
                 </div>
+
+                {/* Session Summary */}
+                {(studyTime > 0 || breakTime > 0) && (
+                  <div className="mt-4 p-3 bg-gray-50 dark:bg-[#0f0f0f] rounded-lg border border-gray-200 dark:border-gray-800">
+                    <div className="text-xs text-gray-600 dark:text-gray-400 mb-2">Session Summary:</div>
+                    <div className="grid grid-cols-2 gap-2 text-xs">
+                      <div>
+                        <span className="text-gray-600 dark:text-gray-400">Total Study:</span>
+                        <div className="font-semibold text-gray-900 dark:text-white">{formatTime(studyTime)}</div>
+                      </div>
+                      <div>
+                        <span className="text-gray-600 dark:text-gray-400">Total Breaks:</span>
+                        <div className="font-semibold text-gray-900 dark:text-white">{formatTime(breakTime)}</div>
+                      </div>
+                      <div className="col-span-2">
+                        <span className="text-gray-600 dark:text-gray-400">Efficiency:</span>
+                        <div className="font-semibold text-gray-900 dark:text-white">
+                          {studyTime + breakTime > 0 ? Math.round((studyTime / (studyTime + breakTime)) * 100) : 0}%
+                        </div>
+                      </div>
+                    </div>
+                  </div>
+                )}
               </CardContent>
             </Card>
 
